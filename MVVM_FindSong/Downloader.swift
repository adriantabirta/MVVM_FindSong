////
////  Player.swift
////  MVVM_FindSong
////
////  Created by Adrian TABIRTA on 7/12/16.
////  Copyright Â© 2016 Adrian TABIRTA. All rights reserved.
////
//import MediaPlayer
//import AVFoundation
//import Foundation
//
//protocol Downloader: NSURLSessionDelegate {
//    
//
// 
//}
//
//
//extension Downloader {
//
//
//    
//    func localFilePathForUrl(previewUrl: String) -> NSURL? {
//        let documentsPath = NSSearchPathForDirectoriesInDomains(.DocumentDirectory, .UserDomainMask, true)[0] as NSString
//        if let url = NSURL(string: previewUrl), lastPathComponent = url.lastPathComponent {
//            let fullPath = documentsPath.stringByAppendingPathComponent(lastPathComponent)
//            return NSURL(fileURLWithPath:fullPath)
//        }
//        return nil
//    }
//    
//    // This method checks if the local file exists at the path generated by localFilePathForUrl(_:)
//    func localFileExistsForTrack(song: Song) -> Bool {
//        if let urlString = song.songUrl, localUrl = localFilePathForUrl(urlString) {
//            var isDir : ObjCBool = false
//            if let path = localUrl.path {
//                return NSFileManager.defaultManager().fileExistsAtPath(path, isDirectory: &isDir)
//            }
//        }
//        return false
//    }
//
//    
//}
//
//extension Downloader {
//
//     func loadFileAsync(url: NSURL, completion:(path:String, error:NSError!) -> Void) {
//        let documentsUrl =  NSFileManager.defaultManager().URLsForDirectory(.DocumentDirectory, inDomains: .UserDomainMask).first
//        let destinationUrl = documentsUrl!.URLByAppendingPathComponent(url.lastPathComponent!)
//        if NSFileManager().fileExistsAtPath(destinationUrl.path!) {
//            print("file already exists [\(destinationUrl.path!)]")
//            do {
//                
//                var player : AVAudioPlayer
//                let fileURL = NSURL(fileURLWithPath: destinationUrl.path!)
//                try  player = AVAudioPlayer(contentsOfURL: fileURL)
//                player.prepareToPlay()
//                player.delegate = self
//                player.play()
//                print(" trebuie sa cinte")
//            }
//            catch {
//                    print("erro player")
//            }
//            
//            completion(path: destinationUrl.path!, error:nil)
//        } else {
//            let sessionConfig = NSURLSessionConfiguration.defaultSessionConfiguration()
//            let session = NSURLSession(configuration: sessionConfig, delegate: nil, delegateQueue: nil)
//            let request = NSMutableURLRequest(URL: url)
//            request.HTTPMethod = "GET"
//            let task = session.dataTaskWithRequest(request, completionHandler: { (data: NSData?, response: NSURLResponse?, error: NSError?) -> Void in
//                if (error == nil) {
//                    if let response = response as? NSHTTPURLResponse {
//                        print("response=\(response)")
//                        if response.statusCode == 200 {
//                            if data!.writeToURL(destinationUrl, atomically: true) {
//                                print("file saved [\(destinationUrl.path!)]")
//                              
//                                do {
//                                    
////                                    var player : AVPlayer
//                                //   let fileURL = NSURL(fileURLWithPath: destinationUrl.path!)
////                                   try  player = AVPlayer(URL: fileURL)
////                                   // player.prepareToPlay()
////                                   // player.delegate = self
////                                    player.play()
//                                    
//                                   // let moviePlayer: MPMoviePlayerViewController! = MPMoviePlayerViewController(contentURL: fileURL)
//                                 //   presentMoviePlayerViewControllerAnimated(moviePlayer)
//                                
//                                    
//                                    print(" cinta ")
//                                }
//                                catch {
//                                  
//                                    print("erro player")
//                                }
//                                
//                             
//                                
//                                
//                                completion(path: destinationUrl.path!, error:error)
//                            } else {
//                                print("error saving file")
//                                let error = NSError(domain:"Error saving file", code:1001, userInfo:nil)
//                                completion(path: destinationUrl.path!, error:error)
//                            }
//                        }
//                    }
//                }
//                else {
//                    print("Failure: \(error!.localizedDescription)");
//                    completion(path: destinationUrl.path!, error:error)
//                }
//            })
//            task.resume()
//        }
//    }
//}
//
//
//extension Downloader {
//
//    func play(songUrl: String) {
//    
//        if let url = localFilePathForUrl(songUrl) {
//            let player : AVPlayer = AVPlayer(URL: url)
//            player.play()
//            //let moviePlayer: MPMoviePlayerViewController! = MPMoviePlayerViewController(contentURL: url)
//           // presentMoviePlayerViewControllerAnimated(moviePlayer)
//        }
//    }
//    
//    func URLSession(session: NSURLSession, downloadTask: NSURLSessionDownloadTask, didFinishDownloadingToURL location: NSURL) {
//        // 1
//        print("finisat")
//        if let originalURL = downloadTask.originalRequest?.URL?.absoluteString,
//            destinationURL = localFilePathForUrl(originalURL) {
//            
//            print(destinationURL)
//            
//            // 2
//            let fileManager = NSFileManager.defaultManager()
//            do {
//                try fileManager.removeItemAtURL(destinationURL)
//            } catch {
//                // Non-fatal: file probably doesn't exist
//            }
//            do {
//                try fileManager.copyItemAtURL(location, toURL: destinationURL)
//            } catch let error as NSError {
//                print("Could not copy file to disk: \(error.localizedDescription)")
//            }
//        }
//        
//        // 3
//       /* if let url = downloadTask.originalRequest?.URL?.absoluteString {
//            activeDownloads[url] = nil
//            // 4
//            if let trackIndex = trackIndexForDownloadTask(downloadTask) {
//                dispatch_async(dispatch_get_main_queue(), {
//                    self.tableView.reloadRowsAtIndexPaths([NSIndexPath(forRow: trackIndex, inSection: 0)], withRowAnimation: .None)
//                })
//            }
//        }
//        */
//    }
//    
//    func URLSession(session: NSURLSession, downloadTask: NSURLSessionDownloadTask, didWriteData bytesWritten: Int64, totalBytesWritten: Int64, totalBytesExpectedToWrite: Int64) {
//        print(bytesWritten)
//        // 1
//        if let downloadUrl = downloadTask.originalRequest?.URL?.absoluteString
//            download = activeDownloads[downloadUrl] {
//            // 2
//            download.progress = Float(totalBytesWritten)/Float(totalBytesExpectedToWrite)
//            // 3
//            let totalSize = NSByteCountFormatter.stringFromByteCount(totalBytesExpectedToWrite, countStyle: NSByteCountFormatterCountStyle.Binary)
//            // 4
//            if let trackIndex = trackIndexForDownloadTask(downloadTask), let trackCell = tableView.cellForRowAtIndexPath(NSIndexPath(forRow: trackIndex, inSection: 0)) as? TrackCell {
//                dispatch_async(dispatch_get_main_queue(), {
//                    trackCell.progressView.progress = download.progress
//                    trackCell.progressLabel.text =  String(format: "%.1f%% of %@",  download.progress * 100, totalSize)
//                })
//            }
//        }
//        
//    }
//
//}
// 
// 
// 
